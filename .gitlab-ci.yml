# GitLab CI for KubeDR
# See the devguide for further CI/CD details.

stages:
- lint
- docs_build
- general_build
- docker_push
- go_build
- provision
- apply
- test
- release
- cleanup

# ===== GLOBAL VARIABLES BEGIN =====
variables:
  BUILD_NUMBER: ${CI_PIPELINE_ID}
# ===== GLOBAL VARIABLES END =====

# ===== TEMPLATE CONFIGURATION BEGIN =====
.general_template:
  only:
    refs:
    - master
    - merge_requests

.lint_template:
  extends: .general_template
  except:
    variables:
    - $SKIP_LINT == "yes" || $SKIP_DOCS == "true"

# Userguide/Devguide Sphinx docs. Upload to GitLab pages under subdomain for hosting.
.docs_template:
  extends: .general_template
  image: python:3.7-alpine3.10
  variables:
    SPHINXOPTS: ""
    SPHINXBUILD: sphinx-build

    DOCS_PATH_BUILD: $CI_PROJECT_DIR/docs/$DOCS_NAME/build/html

    DOCS_PATH_BASE: /distribution/devops
    DOCS_PATH_FULL: $DOCS_PATH_BASE/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME/docs/$DOCS_NAME
  before_script:
  - apk add --no-cache make
  - pip install sphinx sphinx_rtd_theme
  after_script:
  - rm -rf $DOCS_PATH_FULL/*
  - mkdir -p $DOCS_PATH_FULL
  - cp -rf $DOCS_PATH_BUILD/* $DOCS_PATH_FULL/

# Docker-in-Docker for docker building/tagging/pushing
.dnd_template:
  extends: .general_template
  image: docker:19.03
  services:
  - name: docker:19.03-dind
    command: ["--insecure-registry=docker-registry.devad.catalogic.us:5000"]
  before_script:
  - docker info
  - apk add --no-cache make
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_OPTS: "--insecure-registry='docker-registry.devad.catalogic.us:5000'"
    DOCKER_DRIVER: overlay2

    DOCKER_REGISTRY: docker-registry.devad.catalogic.us:5000
    DOCKER_PREFIX: catalogicsoftware

    DOCKER_KUBEDR_IMAGE_NAME_SHORT: kubedr
    DOCKER_KUBEDR_IMAGE_NAME_LONG: ${DOCKER_REGISTRY}/${DOCKER_KUBEDR_IMAGE_NAME_SHORT}
    DOCKER_KUBEDR_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}

# Ansible plays
.ansible_template:
  extends: .general_template
  image: docker-registry.devad.catalogic.us:5000/ansible:latest
  variables:
    ANSIBLE_PLAYBOOK_REPO_NAME: kubedr-misc
    ANSIBLE_PLAYBOOK_REPO_BRANCH: master
    ANSIBLE_PLAYBOOK_REPO: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER}/kubernetes/kubedrmisc.git
    ANSIBLE_PLAYBOOK_PATH_BASE: ${CI_PROJECT_DIR}/${ANSIBLE_PLAYBOOK_REPO_NAME}
    ANSIBLE_PLAYBOOK_PATH_FULL: ${CI_PROJECT_DIR}/${ANSIBLE_PLAYBOOK_REPO_NAME}/ansible
  dependencies: []
  before_script:
  - >
    git clone
    --single-branch
    --branch ${ANSIBLE_PLAYBOOK_REPO_BRANCH}
    ${ANSIBLE_PLAYBOOK_REPO}
  - cd $ANSIBLE_PLAYBOOK_PATH_FULL
  - ansible --version

# Pytest tests
.pytest_template:
  extends: .ansible_template
  image: docker-registry.devad.catalogic.us:5000/pytest-kubectl
  variables:
    PYTEST_PATH_BASE: ${CI_PROJECT_DIR}/tests
    PYTEST_ADDOPTS: "--color=yes"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
    - tests/*.xml
    reports:
      junit: tests/*.xml
  needs:
  - job: kubedr_apply
    artifacts: false
  - job: k8s_provision
    artifacts: false
  - job: kubedr_image
  except:
    variables:
    - $SKIP_TEST == "yes"

.cleanup_template:
  extends: .ansible_template
  dependencies: []
# ===== TEMPLATE CONFIGURATION END =====

# Rules/Configuration: https://yamllint.readthedocs.io/en/stable/rules.html
yaml_lint:
  extends: .lint_template
  stage: lint
  image: sdesbure/yamllint
  script:
  - yamllint .

md_lint:
  extends: .lint_template
  stage: lint
  image: cytopia/awesome-ci
  script:
  - syntax-markdown --text --extension='.md' --path=./

md_spelling_lint:
  extends: .lint_template
  stage: lint
  image: alpine:3.10
  before_script:
  - apk add --no-cache curl
  - curl -L -o ./install-misspell.sh https://git.io/misspell
  - sh ./install-misspell.sh -b /usr/local/bin
  script:
  - find . -type f -name '*.md' | xargs misspell -error

go_lint:
  extends: .lint_template
  stage: lint
  image: golangci/golangci-lint:v1.20.1-alpine
  before_script:
  - golangci-lint help linters
  script:
  - cd kubedr
  - golangci-lint run ./...
  only:
    refs:
    - master
    - merge_requests
  except:
    changes:
    - docs/**/*
    - tests/**/*

userguide:
  extends: .docs_template
  stage: docs_build
  variables:
    DOCS_NAME: userguide
  script:
  - cd docs/${DOCS_NAME}
  - make html
  artifacts:
    paths:
    - docs/userguide/build/html
    expire_in: 1 week
  only:
    changes:
    - docs/userguide/**/*

devguide:
  extends: .docs_template
  stage: docs_build
  variables:
    DOCS_NAME: devguide
  script:
  - cd docs/${DOCS_NAME}
  - make html
  artifacts:
    paths:
    - docs/devguide/build/html
    expire_in: 1 week
  only:
    changes:
    - docs/devguide/**/*

kubedr_image:
  extends: .dnd_template
  stage: general_build
  script:
  - make docker_build
  - docker push ${DOCKER_KUBEDR_IMAGE_NAME_LONG}:${DOCKER_KUBEDR_IMAGE_TAG}

k8s_deploy:
  extends: .ansible_template
  stage: general_build
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    k8s-deploy.yml

kubedr_push_latest:
  extends: .dnd_template
  stage: docker_push
  variables:
    GIT_STRATEGY: none
  script:
  - make docker_push_latest
  needs:
  - job: kubedr_image

kubedr_go:
  extends: .dnd_template
  image: docker-registry.devad.catalogic.us:5000/go-kustomize
  stage: go_build
  before_script:
  - kustomize version
  script:
  - make go_build
  artifacts:
    paths:
    - kubedr/kubedr.yaml
  cache:
    paths:
    - kubedr/kubedr.yaml
    key: ${BUILD_NUMBER}
    policy: push

k8s_provision:
  extends: .ansible_template
  stage: provision
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    k8s-provision.yml
  needs:
  - job: k8s_deploy

kubedr_apply:
  extends: .ansible_template
  stage: apply
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    kubedr-apply.yml
  dependencies:
  - kubedr_go
  cache:
    paths:
    - kubedr/kubedr.yaml
    key: ${BUILD_NUMBER}
    policy: pull

k8s_1.13:
  extends: .pytest_template
  stage: test
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    -l "*1-13*"
    testenv-setup.yml
  - cd ${PYTEST_PATH_BASE}
  - sh ./runtests

k8s_1.14:
  extends: .pytest_template
  stage: test
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    -l "*1-14*"
    testenv-setup.yml
  - cd ${PYTEST_PATH_BASE}
  - sh ./runtests

k8s_1.15:
  extends: .pytest_template
  stage: test
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    -l "*1-15*"
    testenv-setup.yml
  - cd ${PYTEST_PATH_BASE}
  - sh ./runtests

k8s_1.16:
  extends: .pytest_template
  stage: test
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    -l "*1-16*"
    testenv-setup.yml
  - cd ${PYTEST_PATH_BASE}
  - sh ./runtests

k8s_1.17:
  extends: .pytest_template
  stage: test
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    -l "*1-17*"
    testenv-setup.yml
  - cd ${PYTEST_PATH_BASE}
  - sh ./runtests

kubedr_dockerhhub:
  extends: .dnd_template
  stage: release
  variables:
    GIT_STRATEGY: none
  script:
  - make docker_push_latest
  when: on_success
  only:
    refs:
    - tags

k8s_cleanup:
  extends: .ansible_template
  stage: cleanup
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    k8s-cleanup.yml
  when: always

s3_cleanup:
  extends: .ansible_template
  stage: cleanup
  script:
  - >
    ansible-playbook
    -e build_number="${BUILD_NUMBER}"
    s3-cleanup.yml
  when: always